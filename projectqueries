SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE PROCESS_ACCOUNT_OPS_PROC (
    p_account_number IN account.act_no%TYPE,
    p_operation_opt  IN NUMBER,   -- 1 for Deposit, 2 for Withdrawal, 3 for Balance check
    p_amount         IN NUMBER DEFAULT NULL -- Amount is optional, only used for deposit/withdrawal
)
IS
    v_current_balance  account.act_balance%TYPE;
    v_old_balance      account.act_balance%TYPE; -- To capture balance before update
    v_new_balance      account.act_balance%TYPE;
BEGIN
    -- Select the current balance. If account_number not found, NO_DATA_FOUND will be raised.
    SELECT act_balance INTO v_current_balance
    FROM account
    WHERE act_no = p_account_number;

    v_old_balance := v_current_balance; -- Store original balance before potential modification

    IF p_operation_opt = 1 THEN -- Deposit
        IF p_amount IS NULL OR p_amount <= 0 THEN
            DBMS_OUTPUT.PUT_LINE('------------------------------------');
            DBMS_OUTPUT.PUT_LINE('Deposit Failed: Invalid deposit amount.');
            DBMS_OUTPUT.PUT_LINE('Your current balance is Rs. ' || v_current_balance);
            DBMS_OUTPUT.PUT_LINE('------------------------------------');
            RETURN; -- Exit procedure if amount is invalid
        END IF;

        v_new_balance := v_current_balance + p_amount;
        UPDATE account
        SET act_balance = v_new_balance
        WHERE act_no = p_account_number;

        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Deposit Successful!');
        DBMS_OUTPUT.PUT_LINE('Rs. ' || p_amount || ' has been credited to your account.');
        DBMS_OUTPUT.PUT_LINE('Your final balance is Rs. ' || v_new_balance);
        DBMS_OUTPUT.PUT_LINE('------------------------------------');

    ELSIF p_operation_opt = 2 THEN -- Withdrawal
        IF p_amount IS NULL OR p_amount <= 0 THEN
            DBMS_OUTPUT.PUT_LINE('------------------------------------');
            DBMS_OUTPUT.PUT_LINE('Withdrawal Failed: Invalid withdrawal amount.');
            DBMS_OUTPUT.PUT_LINE('Your current balance is Rs. ' || v_current_balance);
            DBMS_OUTPUT.PUT_LINE('------------------------------------');
            RETURN; -- Exit procedure if amount is invalid
        END IF;

        IF (p_amount <= v_current_balance) THEN
            v_new_balance := v_current_balance - p_amount;
            UPDATE account
            SET act_balance = v_new_balance
            WHERE act_no = p_account_number;

            DBMS_OUTPUT.PUT_LINE('------------------------------------');
            DBMS_OUTPUT.PUT_LINE('Withdrawal Successful!');
            DBMS_OUTPUT.PUT_LINE('Rs. ' || p_amount || ' has been debited from your account.');
            DBMS_OUTPUT.PUT_LINE('Your final balance is Rs. ' || v_new_balance);
            DBMS_OUTPUT.PUT_LINE('------------------------------------');
        ELSE
            DBMS_OUTPUT.PUT_LINE('------------------------------------');
            DBMS_OUTPUT.PUT_LINE('Transaction Failed: Your withdrawal amount is greater than balance.');
            DBMS_OUTPUT.PUT_LINE('Your final balance is Rs. ' || v_current_balance); -- Balance remains unchanged
            DBMS_OUTPUT.PUT_LINE('------------------------------------');
        END IF;

    ELSIF p_operation_opt = 3 THEN -- Check Balance
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Your balance is Rs. ' || v_current_balance);
        DBMS_OUTPUT.PUT_LINE('------------------------------------');

    ELSE -- Invalid option
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Invalid Option: Please enter 1 for Deposit, 2 for Withdrawal, or 3 for Balance check.');
        DBMS_OUTPUT.PUT_LINE('Your current balance for account ' || p_account_number || ' is Rs. ' || v_current_balance);
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        DBMS_OUTPUT.PUT_LINE('Error: Account number ' || p_account_number || ' not found.');
        DBMS_OUTPUT.PUT_LINE('Transaction Aborted.');
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred in PROCESS_ACCOUNT_OPS_PROC: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
END;


---------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE LIST_BRANCH_ACCOUNTS_PROC (
    p_branch_name IN account_branch.act_branch%TYPE
)
IS
    -- Define an explicit cursor to select account details for a given branch
    CURSOR c_branch_accounts IS
        SELECT
            a.act_no,
            a.act_name,
            a.act_balance
        FROM
            account a
        JOIN
            account_branch ab ON a.act_no = ab.act_no
        WHERE
            ab.act_branch = p_branch_name
        ORDER BY
            a.act_name;

    v_any_accounts_found BOOLEAN := FALSE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('------------------------------------');
    DBMS_OUTPUT.PUT_LINE('Accounts in Branch: ' || p_branch_name);
    DBMS_OUTPUT.PUT_LINE('------------------------------------');

    FOR rec_account IN c_branch_accounts LOOP
        DBMS_OUTPUT.PUT_LINE('Account No: ' || rec_account.act_no ||
                             ', Name: ' || rec_account.act_name ||
                             ', Balance: Rs. ' || rec_account.act_balance);
        v_any_accounts_found := TRUE;
    END LOOP;

    IF NOT v_any_accounts_found THEN
        DBMS_OUTPUT.PUT_LINE('No accounts found for the branch: ' || p_branch_name || '.');
    END IF;
    DBMS_OUTPUT.PUT_LINE('------------------------------------');

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
        DBMS_OUTPUT.PUT_LINE('An error occurred in LIST_BRANCH_ACCOUNTS_PROC: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('------------------------------------');
END;

-----------------------------------------------------------------------------------------------------------
CREATE TABLE bank_transaction_log (
    log_id          NUMBER PRIMARY KEY, -- Populated by sequence and trigger
    act_no          VARCHAR2(10) NOT NULL,
    old_balance     NUMBER(10),
    new_balance     NUMBER(10),
    action_type     VARCHAR2(20) NOT NULL, -- e.g., 'DEPOSIT', 'WITHDRAWAL', 'INITIAL'
    action_date     DATE DEFAULT SYSDATE NOT NULL,
    performed_by    VARCHAR2(100) DEFAULT USER NOT NULL
);

-----------------------------------------------------------------------------------------------
-- Sequence for bank_transaction_log
CREATE SEQUENCE bank_trans_log_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Trigger to populate log_id from sequence BEFORE INSERT on bank_transaction_log
CREATE OR REPLACE TRIGGER TRG_BANK_TRANS_LOG_SEQ
BEFORE INSERT ON bank_transaction_log
FOR EACH ROW
BEGIN
    IF :NEW.log_id IS NULL THEN
        SELECT bank_trans_log_seq.NEXTVAL INTO :NEW.log_id FROM DUAL;
    END IF;
END;
/



CREATE OR REPLACE TRIGGER TRG_ACCOUNT_BALANCE_CHANGE
AFTER UPDATE OF act_balance ON account
FOR EACH ROW
DECLARE
    v_action_type VARCHAR2(20);
BEGIN
    IF :NEW.act_balance > :OLD.act_balance THEN
        v_action_type := 'DEPOSIT';
    ELSIF :NEW.act_balance < :OLD.act_balance THEN
        v_action_type := 'WITHDRAWAL';
    ELSE
        -- No actual balance change, perhaps some other column was updated
        RETURN;
    END IF;

    -- Insert into the bank_transaction_log table
    INSERT INTO bank_transaction_log (act_no, old_balance, new_balance, action_type, performed_by)
    VALUES (:NEW.act_no, :OLD.act_balance, :NEW.act_balance, v_action_type, USER);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error in TRG_ACCOUNT_BALANCE_CHANGE: ' || SQLERRM);
END;
--------------------------------------------------------------------------------------------------------
---function--------

CREATE OR REPLACE FUNCTION GET_BRANCH_ACCOUNT_COUNT_FUNC (
    p_branch_name IN account_branch.act_branch%TYPE
)
RETURN NUMBER
IS
    v_account_count NUMBER := 0;
BEGIN
    SELECT COUNT(a.act_no)
    INTO v_account_count
    FROM account a
    JOIN account_branch ab ON a.act_no = ab.act_no
    WHERE ab.act_branch = p_branch_name;

    RETURN v_account_count;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error in GET_BRANCH_ACCOUNT_COUNT_FUNC: ' || SQLERRM);
        RETURN -1; -- Return -1 to indicate an error
END;


---------------------------------------------------------------------------------

EXEC PROCESS_ACCOUNT_OPS_PROC('19DCS011', 1, 20000);
COMMIT; 
SELECT * FROM account where act_no = '19DCS011';
SELECT * FROM account_branch ;
SELECT * FROM account_city ;

SELECT * FROM bank_transaction_log ; -- Check audit log

EXEC LIST_BRANCH_ACCOUNTS_PROC('Mumbai'); 

-----------------------------------------------------------------------------------